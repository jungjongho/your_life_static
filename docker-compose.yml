services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: yourlife_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-yourlife_stats}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: yourlife_backend
    restart: always
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-yourlife_stats}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    ports:
      - "8050:8050"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8050 --reload

  # Next.js Frontend
  frontend:
    image: node:18-alpine
    container_name: yourlife_frontend
    restart: always
    working_dir: /app
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8050}
    ports:
      - "3050:3050"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: sh -c "npm install && npm run build && npm run start -- -p 3050"

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: yourlife_nginx
    restart: always
    ports:
      - "3000:3000"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
